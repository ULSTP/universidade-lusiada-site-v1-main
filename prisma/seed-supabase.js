const { PrismaClient } = require('../lib/generated/prisma');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Iniciando seed da base de dados Supabase...\n');

  // 1. Criar Departamentos
  console.log('üè¢ Criando departamentos...');
  const departamentos = await Promise.all([
    prisma.departamento.create({
      data: {
        nome: 'Engenharia e Tecnologia',
        descricao: 'Departamento respons√°vel pelos cursos de engenharia e tecnologia'
      }
    }),
    prisma.departamento.create({
      data: {
        nome: 'Ci√™ncias Sociais e Humanas',
        descricao: 'Departamento de ci√™ncias sociais, humanas e comunica√ß√£o'
      }
    }),
    prisma.departamento.create({
      data: {
        nome: 'Economia e Gest√£o',
        descricao: 'Departamento de economia, gest√£o e administra√ß√£o'
      }
    }),
    prisma.departamento.create({
      data: {
        nome: 'Direito',
        descricao: 'Departamento de ci√™ncias jur√≠dicas'
      }
    })
  ]);
  console.log(`‚úÖ ${departamentos.length} departamentos criados`);

  // 2. Criar Cursos
  console.log('\nüìö Criando cursos...');
  const cursos = await Promise.all([
    // Engenharia e Tecnologia
    prisma.curso.create({
      data: {
        nome: 'Engenharia Inform√°tica',
        descricao: 'Curso de licenciatura em Engenharia Inform√°tica',
        nivel: 'LICENCIATURA',
        duracaoAnos: 3,
        departamentoId: departamentos[0].id
      }
    }),
    prisma.curso.create({
      data: {
        nome: 'Engenharia Civil',
        descricao: 'Curso de licenciatura em Engenharia Civil',
        nivel: 'LICENCIATURA',
        duracaoAnos: 4,
        departamentoId: departamentos[0].id
      }
    }),
    // Ci√™ncias Sociais
    prisma.curso.create({
      data: {
        nome: 'Comunica√ß√£o Social',
        descricao: 'Curso de licenciatura em Comunica√ß√£o Social',
        nivel: 'LICENCIATURA',
        duracaoAnos: 3,
        departamentoId: departamentos[1].id
      }
    }),
    // Economia e Gest√£o
    prisma.curso.create({
      data: {
        nome: 'Gest√£o de Empresas',
        descricao: 'Curso de licenciatura em Gest√£o de Empresas',
        nivel: 'LICENCIATURA',
        duracaoAnos: 3,
        departamentoId: departamentos[2].id
      }
    }),
    prisma.curso.create({
      data: {
        nome: 'Economia',
        descricao: 'Curso de licenciatura em Economia',
        nivel: 'LICENCIATURA',
        duracaoAnos: 3,
        departamentoId: departamentos[2].id
      }
    }),
    // Direito
    prisma.curso.create({
      data: {
        nome: 'Direito',
        descricao: 'Curso de licenciatura em Direito',
        nivel: 'LICENCIATURA',
        duracaoAnos: 4,
        departamentoId: departamentos[3].id
      }
    }),
    // Mestrados
    prisma.curso.create({
      data: {
        nome: 'Mestrado em Gest√£o',
        descricao: 'Mestrado em Gest√£o de Empresas',
        nivel: 'MESTRADO',
        duracaoAnos: 2,
        departamentoId: departamentos[2].id
      }
    })
  ]);
  console.log(`‚úÖ ${cursos.length} cursos criados`);

  // 3. Criar Disciplinas (exemplo para Engenharia Inform√°tica)
  console.log('\nüìñ Criando disciplinas...');
  const disciplinas = await Promise.all([
    // 1¬∫ Ano - Engenharia Inform√°tica
    prisma.disciplina.create({
      data: {
        nome: 'Programa√ß√£o I',
        descricao: 'Introdu√ß√£o √† programa√ß√£o',
        cargaHoraria: 60,
        semestre: 1,
        cursoId: cursos[0].id // Engenharia Inform√°tica
      }
    }),
    prisma.disciplina.create({
      data: {
        nome: 'Matem√°tica I',
        descricao: 'Matem√°tica para engenharia',
        cargaHoraria: 60,
        semestre: 1,
        cursoId: cursos[0].id
      }
    }),
    prisma.disciplina.create({
      data: {
        nome: 'Programa√ß√£o II',
        descricao: 'Programa√ß√£o orientada a objetos',
        cargaHoraria: 60,
        semestre: 2,
        cursoId: cursos[0].id
      }
    }),
    // Gest√£o de Empresas
    prisma.disciplina.create({
      data: {
        nome: 'Contabilidade Geral',
        descricao: 'Princ√≠pios de contabilidade',
        cargaHoraria: 45,
        semestre: 1,
        cursoId: cursos[3].id // Gest√£o de Empresas
      }
    }),
    prisma.disciplina.create({
      data: {
        nome: 'Marketing',
        descricao: 'Fundamentos de marketing',
        cargaHoraria: 45,
        semestre: 2,
        cursoId: cursos[3].id
      }
    })
  ]);
  console.log(`‚úÖ ${disciplinas.length} disciplinas criadas`);

  // 4. Criar Utilizadores
  console.log('\nüë• Criando utilizadores...');
  const hashedPassword = await bcrypt.hash('123456', 10);
  
  const usuarios = await Promise.all([
    // Administrador
    prisma.user.create({
      data: {
        nome: 'Jos√© Administrador',
        email: 'admin@ulstp.ac.st',
        senha: hashedPassword,
        tipoUsuario: 'ADMIN',
        estado: 'ATIVO',
        genero: 'M',
        dataNascimento: new Date('1980-01-15'),
        telefone: '+239 999 0001'
      }
    }),
    // Professor
    prisma.user.create({
      data: {
        nome: 'Maria Silva',
        email: 'maria.silva@ulstp.ac.st',
        senha: hashedPassword,
        tipoUsuario: 'PROFESSOR',
        estado: 'ATIVO',
        genero: 'F',
        dataNascimento: new Date('1975-03-20'),
        telefone: '+239 999 0002'
      }
    }),
    // Estudantes
    prisma.user.create({
      data: {
        nome: 'Jo√£o Santos',
        email: 'joao.santos@estudante.ulstp.ac.st',
        senha: hashedPassword,
        tipoUsuario: 'ESTUDANTE',
        estado: 'ATIVO',
        genero: 'M',
        dataNascimento: new Date('2000-05-10'),
        telefone: '+239 999 1001'
      }
    }),
    prisma.user.create({
      data: {
        nome: 'Ana Costa',
        email: 'ana.costa@estudante.ulstp.ac.st',
        senha: hashedPassword,
        tipoUsuario: 'ESTUDANTE',
        estado: 'ATIVO',
        genero: 'F',
        dataNascimento: new Date('1999-12-25'),
        telefone: '+239 999 1002'
      }
    }),
    prisma.user.create({
      data: {
        nome: 'Pedro Oliveira',
        email: 'pedro.oliveira@estudante.ulstp.ac.st',
        senha: hashedPassword,
        tipoUsuario: 'ESTUDANTE',
        estado: 'ATIVO',
        genero: 'M',
        dataNascimento: new Date('2001-08-15'),
        telefone: '+239 999 1003'
      }
    })
  ]);
  console.log(`‚úÖ ${usuarios.length} utilizadores criados`);

  // 5. Criar Turmas
  console.log('\nüéì Criando turmas...');
  const turmas = await Promise.all([
    prisma.turma.create({
      data: {
        cursoId: cursos[0].id, // Engenharia Inform√°tica
        ano: 2024,
        semestre: 1,
        descricao: 'Turma A - 1¬∫ Ano Eng. Inform√°tica'
      }
    }),
    prisma.turma.create({
      data: {
        cursoId: cursos[3].id, // Gest√£o de Empresas
        ano: 2024,
        semestre: 1,
        descricao: 'Turma A - 1¬∫ Ano Gest√£o'
      }
    })
  ]);
  console.log(`‚úÖ ${turmas.length} turmas criadas`);

  // 6. Criar Matr√≠culas
  console.log('\nüìù Criando matr√≠culas...');
  const matriculas = await Promise.all([
    // Jo√£o Santos - Engenharia Inform√°tica
    prisma.matricula.create({
      data: {
        usuarioId: usuarios[2].id, // Jo√£o Santos
        turmaId: turmas[0].id,
        cursoId: cursos[0].id,
        ano: 2024,
        semestre: 1,
        dataMatricula: new Date('2024-09-01'),
        estado: 'ATIVA'
      }
    }),
    // Ana Costa - Gest√£o de Empresas
    prisma.matricula.create({
      data: {
        usuarioId: usuarios[3].id, // Ana Costa
        turmaId: turmas[1].id,
        cursoId: cursos[3].id,
        ano: 2024,
        semestre: 1,
        dataMatricula: new Date('2024-09-01'),
        estado: 'ATIVA'
      }
    }),
    // Pedro Oliveira - Engenharia Inform√°tica
    prisma.matricula.create({
      data: {
        usuarioId: usuarios[4].id, // Pedro Oliveira
        turmaId: turmas[0].id,
        cursoId: cursos[0].id,
        ano: 2024,
        semestre: 1,
        dataMatricula: new Date('2024-09-02'),
        estado: 'ATIVA'
      }
    })
  ]);
  console.log(`‚úÖ ${matriculas.length} matr√≠culas criadas`);

  // 7. Criar Propinas
  console.log('\nüí∞ Criando propinas...');
  const propinas = await Promise.all([
    prisma.propina.create({
      data: {
        usuarioId: usuarios[2].id, // Jo√£o Santos
        periodo: '2024-1¬∫ Semestre',
        valor: 150000.00, // 1500 STN
        dataEmissao: new Date('2024-08-15'),
        estado: 'PENDENTE',
        multa: 0
      }
    }),
    prisma.propina.create({
      data: {
        usuarioId: usuarios[3].id, // Ana Costa
        periodo: '2024-1¬∫ Semestre',
        valor: 150000.00,
        dataEmissao: new Date('2024-08-15'),
        estado: 'PAGO',
        multa: 0
      }
    })
  ]);
  console.log(`‚úÖ ${propinas.length} propinas criadas`);

  // 8. Criar Pagamento (exemplo)
  console.log('\nüí≥ Criando pagamentos...');
  const pagamentos = await Promise.all([
    prisma.pagamento.create({
      data: {
        propinaId: propinas[1].id, // Ana Costa
        dataPagamento: new Date('2024-09-01'),
        valorPago: 150000.00,
        metodoPagamento: 'TRANSFERENCIA',
        recibo: 'REC-2024-001'
      }
    })
  ]);
  console.log(`‚úÖ ${pagamentos.length} pagamentos criados`);

  console.log('\nüéâ Seed conclu√≠do com sucesso!');
  console.log('\nüìä Resumo dos dados criados:');
  console.log(`‚Ä¢ ${departamentos.length} Departamentos`);
  console.log(`‚Ä¢ ${cursos.length} Cursos`);
  console.log(`‚Ä¢ ${disciplinas.length} Disciplinas`);
  console.log(`‚Ä¢ ${usuarios.length} Utilizadores`);
  console.log(`‚Ä¢ ${turmas.length} Turmas`);
  console.log(`‚Ä¢ ${matriculas.length} Matr√≠culas`);
  console.log(`‚Ä¢ ${propinas.length} Propinas`);
  console.log(`‚Ä¢ ${pagamentos.length} Pagamentos`);

  console.log('\nüë§ Contas de teste criadas:');
  console.log('üìß admin@ulstp.ac.st (Admin) - Senha: 123456');
  console.log('üìß maria.silva@ulstp.ac.st (Professor) - Senha: 123456');
  console.log('üìß joao.santos@estudante.ulstp.ac.st (Estudante) - Senha: 123456');
  console.log('üìß ana.costa@estudante.ulstp.ac.st (Estudante) - Senha: 123456');
  console.log('üìß pedro.oliveira@estudante.ulstp.ac.st (Estudante) - Senha: 123456');
}

main()
  .catch((e) => {
    console.error('‚ùå Erro durante o seed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  }); 
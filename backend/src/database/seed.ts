import { PrismaClient } from '../generated/prisma';
import bcrypt from 'bcryptjs';
import { logger } from '../utils/logger';

const prisma = new PrismaClient();

async function main() {
  logger.info('üå± Iniciando seed da base de dados...');

  try {
    // Limpar dados existentes (cuidado em produ√ß√£o!)
    if (process.env.NODE_ENV !== 'production') {
      await prisma.user.deleteMany();
      await prisma.departamento.deleteMany();
      logger.info('üóëÔ∏è Dados existentes removidos');
    }

    // Hash padr√£o para senhas de teste
    const defaultPasswordHash = await bcrypt.hash('123456', 12);

    // Criar departamentos
    const departamentos = await Promise.all([
      prisma.departamento.create({
        data: {
          nome: 'Ci√™ncias da Computa√ß√£o',
          codigo: 'CC',
          descricao: 'Departamento de Ci√™ncias da Computa√ß√£o e Tecnologia',
          chefe: 'Prof. Jo√£o Silva'
        }
      }),
      prisma.departamento.create({
        data: {
          nome: 'Administra√ß√£o',
          codigo: 'ADM',
          descricao: 'Departamento de Administra√ß√£o e Gest√£o',
          chefe: 'Prof. Maria Santos'
        }
      }),
      prisma.departamento.create({
        data: {
          nome: 'Direito',
          codigo: 'DIR',
          descricao: 'Departamento de Ci√™ncias Jur√≠dicas',
          chefe: 'Prof. Carlos Mendes'
        }
      })
    ]);

    logger.info(`‚úÖ ${departamentos.length} departamentos criados`);

    // Criar usu√°rios
    const users = await Promise.all([
      // Admin
      prisma.user.create({
        data: {
          nome: 'Administrador do Sistema',
          email: 'admin@ulstp.ac.st',
          senha: defaultPasswordHash,
          tipoUsuario: 'ADMIN',
          estado: 'ATIVO',
          genero: 'MASCULINO',
          telefone: '+239 222 1234'
        }
      }),

      // Professores
      prisma.user.create({
        data: {
          nome: 'Prof. Maria Silva',
          email: 'maria.silva@ulstp.ac.st',
          senha: defaultPasswordHash,
          tipoUsuario: 'PROFESSOR',
          estado: 'ATIVO',
          genero: 'FEMININO',
          dataNascimento: new Date('1975-03-15'),
          telefone: '+239 222 5678',
          numeroFuncionario: 'PROF001'
        }
      }),

      prisma.user.create({
        data: {
          nome: 'Prof. Jo√£o Santos',
          email: 'joao.santos@ulstp.ac.st',
          senha: defaultPasswordHash,
          tipoUsuario: 'PROFESSOR',
          estado: 'ATIVO',
          genero: 'MASCULINO',
          dataNascimento: new Date('1980-07-22'),
          telefone: '+239 222 9012',
          numeroFuncionario: 'PROF002'
        }
      }),

      // Estudantes
      prisma.user.create({
        data: {
          nome: 'Ana Costa',
          email: 'ana.costa@estudante.ulstp.ac.st',
          senha: defaultPasswordHash,
          tipoUsuario: 'ESTUDANTE',
          estado: 'ATIVO',
          genero: 'FEMININO',
          dataNascimento: new Date('2002-05-10'),
          telefone: '+239 991 2345',
          numeroEstudante: '20240001'
        }
      }),

      prisma.user.create({
        data: {
          nome: 'Pedro Almeida',
          email: 'pedro.almeida@estudante.ulstp.ac.st',
          senha: defaultPasswordHash,
          tipoUsuario: 'ESTUDANTE',
          estado: 'ATIVO',
          genero: 'MASCULINO',
          dataNascimento: new Date('2001-12-03'),
          telefone: '+239 991 6789',
          numeroEstudante: '20240002'
        }
      }),

      prisma.user.create({
        data: {
          nome: 'Carla Ferreira',
          email: 'carla.ferreira@estudante.ulstp.ac.st',
          senha: defaultPasswordHash,
          tipoUsuario: 'ESTUDANTE',
          estado: 'ATIVO',
          genero: 'FEMININO',
          dataNascimento: new Date('2003-08-18'),
          telefone: '+239 991 0123',
          numeroEstudante: '20240003'
        }
      }),

      // Funcion√°rios
      prisma.user.create({
        data: {
          nome: 'Secret√°ria Administrativa',
          email: 'secretaria@ulstp.ac.st',
          senha: defaultPasswordHash,
          tipoUsuario: 'FUNCIONARIO',
          estado: 'ATIVO',
          genero: 'FEMININO',
          telefone: '+239 222 4567',
          numeroFuncionario: 'FUNC001'
        }
      }),

      prisma.user.create({
        data: {
          nome: 'Tesoureiro',
          email: 'tesouraria@ulstp.ac.st',
          senha: defaultPasswordHash,
          tipoUsuario: 'FUNCIONARIO',
          estado: 'ATIVO',
          genero: 'MASCULINO',
          telefone: '+239 222 8901',
          numeroFuncionario: 'FUNC002'
        }
      })
    ]);

    logger.info(`‚úÖ ${users.length} usu√°rios criados`);

    // Criar alguns cursos
    const cursos = await Promise.all([
      prisma.curso.create({
        data: {
          nome: 'Licenciatura em Engenharia Inform√°tica',
          codigo: 'LEI',
          descricao: 'Curso de forma√ß√£o em tecnologias da informa√ß√£o',
          nivel: 'LICENCIATURA',
          duracaoAnos: 4,
          duracaoSemestres: 8,
          creditosMinimos: 240,
          departamentoId: departamentos[0].id,
          coordenadorId: users[1].id // Prof. Maria Silva
        }
      }),

      prisma.curso.create({
        data: {
          nome: 'Licenciatura em Administra√ß√£o',
          codigo: 'LAD',
          descricao: 'Curso de forma√ß√£o em gest√£o e administra√ß√£o',
          nivel: 'LICENCIATURA',
          duracaoAnos: 4,
          duracaoSemestres: 8,
          creditosMinimos: 240,
          departamentoId: departamentos[1].id,
          coordenadorId: users[2].id // Prof. Jo√£o Santos
        }
      }),

      prisma.curso.create({
        data: {
          nome: 'Licenciatura em Direito',
          codigo: 'LDIR',
          descricao: 'Curso de forma√ß√£o em ci√™ncias jur√≠dicas',
          nivel: 'LICENCIATURA',
          duracaoAnos: 4,
          duracaoSemestres: 8,
          creditosMinimos: 240,
          departamentoId: departamentos[2].id
        }
      })
    ]);

    logger.info(`‚úÖ ${cursos.length} cursos criados`);

    // Criar disciplinas para o curso de Engenharia Inform√°tica
    const disciplinas = await Promise.all([
      // 1¬∫ Semestre
      prisma.disciplina.create({
        data: {
          nome: 'Introdu√ß√£o √† Programa√ß√£o',
          codigo: 'IP001',
          descricao: 'Fundamentos de programa√ß√£o e l√≥gica computacional',
          cargaHoraria: 60,
          creditos: 6,
          semestre: 1,
          anoLetivo: 2024,
          obrigatoria: true,
          cursoId: cursos[0].id
        }
      }),

      prisma.disciplina.create({
        data: {
          nome: 'Matem√°tica I',
          codigo: 'MAT001',
          descricao: 'C√°lculo diferencial e integral',
          cargaHoraria: 60,
          creditos: 6,
          semestre: 1,
          anoLetivo: 2024,
          obrigatoria: true,
          cursoId: cursos[0].id
        }
      }),

      prisma.disciplina.create({
        data: {
          nome: 'F√≠sica I',
          codigo: 'FIS001',
          descricao: 'Mec√¢nica e termodin√¢mica',
          cargaHoraria: 60,
          creditos: 6,
          semestre: 1,
          anoLetivo: 2024,
          obrigatoria: true,
          cursoId: cursos[0].id
        }
      }),

      // 2¬∫ Semestre
      prisma.disciplina.create({
        data: {
          nome: 'Programa√ß√£o Orientada a Objetos',
          codigo: 'POO001',
          descricao: 'Conceitos de POO e implementa√ß√£o pr√°tica',
          cargaHoraria: 60,
          creditos: 6,
          semestre: 2,
          anoLetivo: 2024,
          obrigatoria: true,
          cursoId: cursos[0].id
        }
      }),

      prisma.disciplina.create({
        data: {
          nome: 'Matem√°tica II',
          codigo: 'MAT002',
          descricao: '√Ålgebra linear e estat√≠stica',
          cargaHoraria: 60,
          creditos: 6,
          semestre: 2,
          anoLetivo: 2024,
          obrigatoria: true,
          cursoId: cursos[0].id
        }
      }),

      prisma.disciplina.create({
        data: {
          nome: 'Estruturas de Dados',
          codigo: 'ED001',
          descricao: 'Implementa√ß√£o e uso de estruturas de dados',
          cargaHoraria: 60,
          creditos: 6,
          semestre: 2,
          anoLetivo: 2024,
          obrigatoria: true,
          cursoId: cursos[0].id
        }
      }),

      // 3¬∫ Semestre
      prisma.disciplina.create({
        data: {
          nome: 'Bases de Dados',
          codigo: 'BD001',
          descricao: 'Modelagem e implementa√ß√£o de bases de dados',
          cargaHoraria: 60,
          creditos: 6,
          semestre: 3,
          anoLetivo: 2024,
          obrigatoria: true,
          cursoId: cursos[0].id
        }
      }),

      prisma.disciplina.create({
        data: {
          nome: 'Redes de Computadores',
          codigo: 'RC001',
          descricao: 'Fundamentos de redes e protocolos',
          cargaHoraria: 60,
          creditos: 6,
          semestre: 3,
          anoLetivo: 2024,
          obrigatoria: true,
          cursoId: cursos[0].id
        }
      }),

      prisma.disciplina.create({
        data: {
          nome: 'Algoritmos e Complexidade',
          codigo: 'AC001',
          descricao: 'An√°lise de algoritmos e otimiza√ß√£o',
          cargaHoraria: 60,
          creditos: 6,
          semestre: 3,
          anoLetivo: 2024,
          obrigatoria: true,
          cursoId: cursos[0].id
        }
      }),

      // 4¬∫ Semestre
      prisma.disciplina.create({
        data: {
          nome: 'Desenvolvimento Web',
          codigo: 'DW001',
          descricao: 'Tecnologias web frontend e backend',
          cargaHoraria: 60,
          creditos: 6,
          semestre: 4,
          anoLetivo: 2024,
          obrigatoria: true,
          cursoId: cursos[0].id
        }
      }),

      prisma.disciplina.create({
        data: {
          nome: 'Sistemas Operativos',
          codigo: 'SO001',
          descricao: 'Arquitetura e funcionamento de SO',
          cargaHoraria: 60,
          creditos: 6,
          semestre: 4,
          anoLetivo: 2024,
          obrigatoria: true,
          cursoId: cursos[0].id
        }
      }),

      prisma.disciplina.create({
        data: {
          nome: 'Engenharia de Software',
          codigo: 'ES001',
          descricao: 'Metodologias e pr√°ticas de desenvolvimento',
          cargaHoraria: 60,
          creditos: 6,
          semestre: 4,
          anoLetivo: 2024,
          obrigatoria: true,
          cursoId: cursos[0].id
        }
      }),

      // Disciplina optativa
      prisma.disciplina.create({
        data: {
          nome: 'Intelig√™ncia Artificial',
          codigo: 'IA001',
          descricao: 'Fundamentos de IA e machine learning',
          cargaHoraria: 60,
          creditos: 6,
          semestre: 5,
          anoLetivo: 2024,
          obrigatoria: false,
          cursoId: cursos[0].id
        }
      })
    ]);

    logger.info(`‚úÖ ${disciplinas.length} disciplinas criadas`);

    // Criar turmas
    const turmas = await Promise.all([
      prisma.turma.create({
        data: {
          nome: 'Turma A - 1¬∫ Ano',
          codigo: 'LEI-1A-2024',
          cursoId: cursos[0].id,
          ano: 1,
          semestre: 1,
          anoLetivo: 2024,
          maxEstudantes: 30
        }
      }),

      prisma.turma.create({
        data: {
          nome: 'Turma B - 1¬∫ Ano',
          codigo: 'LEI-1B-2024',
          cursoId: cursos[0].id,
          ano: 1,
          semestre: 1,
          anoLetivo: 2024,
          maxEstudantes: 30
        }
      })
    ]);

    logger.info(`‚úÖ ${turmas.length} turmas criadas`);

    // Criar matr√≠culas para estudantes
    const matriculas = await Promise.all([
      prisma.matricula.create({
        data: {
          numeroMatricula: '20240001',
          usuarioId: users[3].id, // Ana Costa
          cursoId: cursos[0].id,
          turmaId: turmas[0].id,
          anoLetivo: 2024,
          semestre: 1,
          status: 'ATIVA'
        }
      }),

      prisma.matricula.create({
        data: {
          numeroMatricula: '20240002',
          usuarioId: users[4].id, // Pedro Almeida
          cursoId: cursos[0].id,
          turmaId: turmas[0].id,
          anoLetivo: 2024,
          semestre: 1,
          status: 'ATIVA'
        }
      }),

      prisma.matricula.create({
        data: {
          numeroMatricula: '20240003',
          usuarioId: users[5].id, // Carla Ferreira
          cursoId: cursos[0].id,
          turmaId: turmas[1].id,
          anoLetivo: 2024,
          semestre: 1,
          status: 'ATIVA'
        }
      })
    ]);

    logger.info(`‚úÖ ${matriculas.length} matr√≠culas criadas`);

    // Criar algumas inscri√ß√µes em disciplinas
    const inscricoes = await Promise.all([
      // Ana Costa - 1¬∫ semestre
      prisma.inscricao.create({
        data: {
          estudanteId: users[3].id,
          disciplinaId: disciplinas[0].id,
          turmaId: turmas[0].id,
          periodo: '2024.1',
          anoLetivo: 2024,
          semestre: 1,
          status: 'ATIVA'
        }
      }),

      prisma.inscricao.create({
        data: {
          estudanteId: users[3].id,
          disciplinaId: disciplinas[1].id,
          turmaId: turmas[0].id,
          periodo: '2024.1',
          anoLetivo: 2024,
          semestre: 1,
          status: 'ATIVA'
        }
      }),

      // Pedro Almeida - 1¬∫ semestre
      prisma.inscricao.create({
        data: {
          estudanteId: users[4].id,
          disciplinaId: disciplinas[0].id,
          turmaId: turmas[0].id,
          periodo: '2024.1',
          anoLetivo: 2024,
          semestre: 1,
          status: 'ATIVA'
        }
      }),

      prisma.inscricao.create({
        data: {
          estudanteId: users[4].id,
          disciplinaId: disciplinas[2].id,
          turmaId: turmas[0].id,
          periodo: '2024.1',
          anoLetivo: 2024,
          semestre: 1,
          status: 'ATIVA'
        }
      })
    ]);

    logger.info(`‚úÖ ${inscricoes.length} inscri√ß√µes criadas`);

    // Criar algumas notas de exemplo
    const notas = await Promise.all([
      prisma.nota.create({
        data: {
          estudanteId: users[3].id,
          disciplinaId: disciplinas[0].id,
          tipoNota: 'PROVA',
          valor: 15.5,
          peso: 0.3,
          dataAvaliacao: new Date('2024-10-15'),
          observacoes: 'Bom desempenho no primeiro teste'
        }
      }),

      prisma.nota.create({
        data: {
          estudanteId: users[3].id,
          disciplinaId: disciplinas[0].id,
          tipoNota: 'PROVA',
          valor: 17.0,
          peso: 0.3,
          dataAvaliacao: new Date('2024-11-15'),
          observacoes: 'Excelente no segundo teste'
        }
      }),

      prisma.nota.create({
        data: {
          estudanteId: users[3].id,
          disciplinaId: disciplinas[0].id,
          tipoNota: 'EXAME_FINAL',
          valor: 16.0,
          peso: 0.4,
          dataAvaliacao: new Date('2024-12-20'),
          observacoes: 'Bom desempenho no exame final'
        }
      })
    ]);

    logger.info(`‚úÖ ${notas.length} notas criadas`);

    // Criar algumas notifica√ß√µes
    const notificacoes = await Promise.all([
      prisma.notificacao.create({
        data: {
          usuarioId: users[3].id,
          titulo: 'Nova nota dispon√≠vel',
          mensagem: 'A nota do teste 1 de Introdu√ß√£o √† Programa√ß√£o est√° dispon√≠vel.',
          tipo: 'NOTA',
          lida: false,
          dataEnvio: new Date()
        }
      }),

      prisma.notificacao.create({
        data: {
          usuarioId: users[4].id,
          titulo: 'Lembrete de inscri√ß√£o',
          mensagem: 'As inscri√ß√µes para o 2¬∫ semestre abrem em breve.',
          tipo: 'INSCRICAO',
          lida: false,
          dataEnvio: new Date()
        }
      })
    ]);

    logger.info(`‚úÖ ${notificacoes.length} notifica√ß√µes criadas`);

    logger.info('üéâ Seed da base de dados conclu√≠do com sucesso!');
    logger.info('üìã Dados de acesso:');
    logger.info('üë§ Admin: admin@ulstp.ac.st / 123456');
    logger.info('üë®‚Äçüè´ Professor: maria.silva@ulstp.ac.st / 123456');
    logger.info('üë©‚Äçüéì Estudante: ana.costa@estudante.ulstp.ac.st / 123456');

  } catch (error) {
    logger.error('‚ùå Erro durante o seed:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  }); 
import swaggerJSDoc from 'swagger-jsdoc';
import { config } from './environment';

const options: swaggerJSDoc.Options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'API Universidade Lus√≠ada',
      version: '1.0.0',
      description: `
        API RESTful para o Sistema de Gest√£o Universit√°ria da Universidade Lus√≠ada de S√£o Tom√© e Pr√≠ncipe.
        
        ## Funcionalidades
        - üîê **Autentica√ß√£o JWT** - Sistema de login seguro
        - üë• **Gest√£o de Usu√°rios** - CRUD completo com diferentes tipos de usu√°rio
        - üìö **Sistema Acad√©mico** - Cursos, disciplinas, matr√≠culas e notas
        - üí∞ **Sistema Financeiro** - Propinas e pagamentos
        - üìÑ **Documentos** - Gest√£o de documentos acad√©micos
        - üìä **Relat√≥rios** - Estat√≠sticas e dashboards
        
        ## Tipos de Usu√°rio
        - **ADMIN** - Acesso total ao sistema
        - **PROFESSOR** - Gest√£o de turmas e notas
        - **ESTUDANTE** - Acesso aos pr√≥prios dados acad√©micos
        - **FUNCIONARIO** - Opera√ß√µes administrativas espec√≠ficas
        
        ## Autentica√ß√£o
        Utilize o endpoint \`/auth/login\` para obter um token JWT.
        Em seguida, inclua o token no header: \`Authorization: Bearer {token}\`
      `,
      contact: {
        name: 'Suporte T√©cnico',
        email: 'suporte@ulstp.ac.st',
        url: 'https://ulstp.ac.st'
      },
      license: {
        name: 'MIT',
        url: 'https://opensource.org/licenses/MIT'
      }
    },
    servers: [
      {
        url: `http://localhost:${config.server.port}/api/${config.api.version}`,
        description: 'Servidor de Desenvolvimento'
      },
      {
        url: `https://api.ulstp.ac.st/api/${config.api.version}`,
        description: 'Servidor de Produ√ß√£o'
      }
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
          description: 'Token JWT obtido atrav√©s do endpoint de login'
        }
      },
      schemas: {
        Error: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: false
            },
            error: {
              type: 'object',
              properties: {
                message: {
                  type: 'string',
                  description: 'Mensagem de erro'
                },
                code: {
                  type: 'string',
                  description: 'C√≥digo do erro'
                },
                details: {
                  type: 'object',
                  description: 'Detalhes adicionais do erro'
                }
              }
            },
            timestamp: {
              type: 'string',
              format: 'date-time'
            },
            path: {
              type: 'string',
              description: 'Endpoint onde ocorreu o erro'
            }
          }
        },
        Success: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: true
            },
            data: {
              type: 'object',
              description: 'Dados da resposta'
            },
            message: {
              type: 'string',
              description: 'Mensagem de sucesso'
            },
            pagination: {
              type: 'object',
              properties: {
                page: {
                  type: 'integer',
                  description: 'P√°gina atual'
                },
                limit: {
                  type: 'integer',
                  description: 'Limite de itens por p√°gina'
                },
                total: {
                  type: 'integer',
                  description: 'Total de itens'
                },
                pages: {
                  type: 'integer',
                  description: 'Total de p√°ginas'
                }
              }
            }
          }
        },
        User: {
          type: 'object',
          properties: {
            id: {
              type: 'string',
              description: 'ID √∫nico do usu√°rio'
            },
            nome: {
              type: 'string',
              description: 'Nome completo'
            },
            email: {
              type: 'string',
              format: 'email',
              description: 'Email √∫nico'
            },
            tipoUsuario: {
              type: 'string',
              enum: ['ADMIN', 'PROFESSOR', 'ESTUDANTE', 'FUNCIONARIO'],
              description: 'Tipo de usu√°rio'
            },
            estado: {
              type: 'string',
              enum: ['ATIVO', 'INATIVO', 'SUSPENSO', 'BLOQUEADO'],
              description: 'Status do usu√°rio'
            },
            genero: {
              type: 'string',
              enum: ['MASCULINO', 'FEMININO', 'OUTRO'],
              description: 'G√™nero'
            },
            dataNascimento: {
              type: 'string',
              format: 'date',
              description: 'Data de nascimento'
            },
            telefone: {
              type: 'string',
              description: 'N√∫mero de telefone'
            },
            numeroEstudante: {
              type: 'string',
              description: 'N√∫mero de matr√≠cula (apenas estudantes)'
            },
            numeroFuncionario: {
              type: 'string',
              description: 'N√∫mero de funcion√°rio'
            },
            avatar: {
              type: 'string',
              description: 'URL da foto de perfil'
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Data de cria√ß√£o'
            },
            updatedAt: {
              type: 'string',
              format: 'date-time',
              description: 'Data da √∫ltima atualiza√ß√£o'
            }
          }
        }
      },
      responses: {
        UnauthorizedError: {
          description: 'Token de acesso requerido ou inv√°lido',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Error'
              },
              example: {
                success: false,
                error: {
                  message: 'Token de acesso requerido',
                  code: 'UNAUTHORIZED'
                },
                timestamp: '2024-01-15T10:30:00Z',
                path: '/api/v1/users'
              }
            }
          }
        },
        ForbiddenError: {
          description: 'Acesso negado - permiss√µes insuficientes',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Error'
              },
              example: {
                success: false,
                error: {
                  message: 'Acesso negado. Permiss√µes insuficientes',
                  code: 'FORBIDDEN'
                },
                timestamp: '2024-01-15T10:30:00Z',
                path: '/api/v1/users'
              }
            }
          }
        },
        NotFoundError: {
          description: 'Recurso n√£o encontrado',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Error'
              },
              example: {
                success: false,
                error: {
                  message: 'Usu√°rio n√£o encontrado',
                  code: 'NOT_FOUND'
                },
                timestamp: '2024-01-15T10:30:00Z',
                path: '/api/v1/users/123'
              }
            }
          }
        },
        ValidationError: {
          description: 'Erro de valida√ß√£o dos dados',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Error'
              },
              example: {
                success: false,
                error: {
                  message: 'Dados de entrada inv√°lidos',
                  code: 'VALIDATION_ERROR',
                  details: [
                    {
                      field: 'email',
                      message: 'Email deve ter um formato v√°lido'
                    }
                  ]
                },
                timestamp: '2024-01-15T10:30:00Z',
                path: '/api/v1/users'
              }
            }
          }
        }
      }
    },
    tags: [
      {
        name: 'Autentica√ß√£o',
        description: 'Endpoints para login, logout e gest√£o de tokens'
      },
      {
        name: 'Usu√°rios',
        description: 'CRUD de usu√°rios do sistema'
      },
      {
        name: 'Cursos',
        description: 'Gest√£o de cursos acad√©micos'
      },
      {
        name: 'Disciplinas',
        description: 'Gest√£o de disciplinas'
      },
      {
        name: 'Matr√≠culas',
        description: 'Sistema de matr√≠culas'
      },
      {
        name: 'Notas',
        description: 'Sistema de avalia√ß√£o e notas'
      },
      {
        name: 'Financeiro',
        description: 'Gest√£o de propinas e pagamentos'
      },
      {
        name: 'Dashboard',
        description: 'Estat√≠sticas e relat√≥rios'
      },
      {
        name: 'Notifica√ß√µes',
        description: 'Sistema de notifica√ß√µes'
      },
      {
        name: 'Documentos',
        description: 'Gest√£o de documentos acad√©micos'
      }
    ]
  },
  apis: [
    './src/controllers/**/*.ts', // Buscar coment√°rios swagger nos controllers
    './src/routes/**/*.ts'       // Buscar coment√°rios swagger nas rotas
  ]
};

export const swaggerSpec = swaggerJSDoc(options); 